<?php
// Echo Open software Copyright Â© 2012 KnowledgeWorks Foundation
// ECHO OPEN trademark and logo are trademarks of New Technology Network LLC
// The Echo Open software is licensed under the GNU GPLv2.  For licensing information // please contact New Technology Network Licensing at: // webmaster@newtechnetwork.org or 935 Clinton Street, Napa, CA 94559.


module_load_include('inc', 'ntlp_courses_activity', 'data_access');
module_load_include('inc', 'ntlp_school', 'data_access');
module_load_include('inc', 'ntlp_school', 'constants');
module_load_include('inc', 'ntlp_resources', 'ntlp_resource_all_stuff');


require_once "ntlp_resource_stuff.inc";
require_once "attachment_handler.inc";
require_once "ntlp_resource_mgmt.inc";
require_once 'data_access.inc';
require_once 'ntlp_resource_view.inc';


function ntlp_resources_menu() {
    $items['ntlp/courses/resource/view/%/%'] = array(
        'title' => 'Course Resources View',
        'page callback' => 'get_resource_view_frm',
        'access arguments' => array('ntlp view resources'), //On Load: check if teacher/student is enrolled in this course
        'page arguments' => array(4, 5),
        'description' => 'NTLP Resource Page',
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/groups/resource/view/%/%'] = array(
        'title' => 'Group Resources View',
        'page callback' => 'get_resource_view_frm',
        'access arguments' => array('ntlp view resources'), //On Load: check if teacher/student is enrolled in this course
        'page arguments' => array(4, 5),
        'description' => 'NTLP Resource Page',
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/node/delete/%/%'] = array(
        'title' => 'Resource Delete',
        'page callback' => '_node_delete_frm',
        'access arguments' => array('delete own resources'),
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/node/delete/data/%/%'] = array(
        'title' => 'Resource Delete',
        'page callback' => 'node_delete_data',
        'access arguments' => array('delete own resources'),
        'page arguments' => array(4, 5),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/comments/new/%'] = array(
        'title' => 'Post New Comments',
        'page callback' => 'comments_post_new', // for wall stuff page..
        'page arguments' => array(3), // Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/post/comments/%/%'] = array(
        'title' => 'Post New Comments',
        'page callback' => 'post_comments_new', // for single resource view page.
        'page arguments' => array(3, 4), //Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/courses/resource/new/%'] = array(
        'title' => 'Post New Resource',
        'page callback' => 'get_new_resrouce_frm',
        'page arguments' => array(4), //Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/courses/resource/edit/%'] = array(
        'title' => 'Post New Resource',
        'page callback' => 'get_new_resrouce_frm',
        'page arguments' => array(4), //Resource id, Comment text
        'access arguments' => array('delete own resources'),
        'type' => MENU_CALLBACK,
    );

//    $items['ntlp/courses/resource/new/%'] = array(
//            'title' => 'Post New Comments',
//            'page callback' => 'get_resrouce_frm',
//            'page arguments' => array(4),               //Resource id, Comment text
//            'access arguments' => array('ntlp view resources'),
//            'type' => MENU_CALLBACK,
//    );

    $items['ntlp/project/resource/new/%'] = array(
        'title' => 'Post New Resource',
        'page callback' => 'get_new_resrouce_frm',
        'page arguments' => array(4), //Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/group/resource/new/%'] = array(
        'title' => 'Post New Resource',
        'page callback' => 'get_new_resrouce_frm',
        'page arguments' => array(4), //Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/course/resource/project/%'] = array(
        'title' => 'Add Resources',
        'page callback' => 'get_resrouce_frm',
        'page arguments' => array(3, 4), //Resource id, Comment text
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/comments/delete/wall/%/%'] = array(
        'title' => 'Comments Delete',
        'page callback' => '_delete_comment_from_wall',
        'access arguments' => array('delete own comment'),
        'page arguments' => array(4, 5),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/comments/delete/%/%'] = array(
        'title' => 'Comments Delete',
        'page callback' => '_delete_comment_from_single_view',
        'access arguments' => array('delete own comment'),
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/course/resources/stuff/%'] = array(
        'title' => 'Course Resources Share Stuff',
        'page callback' => 'ntlp_resources_stuff',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(4),
        'type' => MENU_CALLBACK
    );


    $items['ntlp/course/resources/attachment/pagegoogle'] = array(
        'title' => 'Course Resources',
        'page callback' => 'get_page_google_docs_frm',
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/course/resources/attachment/google'] = array(
        'title' => 'Course Resources',
        'page callback' => 'get_google_docs_frm',
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/course/resources/attachment'] = array(
        'page callback' => 'ntlp_resource_attachment',
        'access arguments' => array('ntlp view resources'),
        'type' => MENU_CALLBACK,
    );

    $items['ntlp/courses/resources/allstuff/%'] = array(
        'title' => 'Course Resources All Stuff',
        'page callback' => 'ntlp_resources_all_stuff',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(4),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/groups/resources/allstuff/%'] = array(
        'title' => 'Group Resources All Stuff',
        'page callback' => 'ntlp_resources_all_stuff',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(4),
        'type' => MENU_CALLBACK
    );


    $items['ntlp/courses/resources/allstuff/search/%'] = array(
        'title' => 'Course Resources All Stuff',
        'page callback' => 'ntlp_resources_all_stuff_search',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(4),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/groups/resources/allstuff/search/%'] = array(
        'title' => 'Group Resources All Stuff',
        'page callback' => 'ntlp_resources_all_stuff_search',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(4),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/courses/resources/allstuff/view/%'] = array(
        'title' => ' ',
        'page callback' => 'ntlp_resources_all_stuff_view',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(5),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/resources/copy/%/%'] = array(
        'title' => ' ',
        'page callback' => 'ntlp_resource_copy_frm',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(3, 4),
        'type' => MENU_CALLBACK
    );

    $items['ntlp/copy/resource/%/%/%/%'] = array(
        'title' => ' ',
        'page callback' => 'ntlp_resource_copy_data',
        'access arguments' => array('ntlp view resources'),
        'page arguments' => array(3, 4, 5, 6),
        'type' => MENU_CALLBACK
    );

    return $items;
}

/* implementation of hook perm */

function get_resource_view_frm($course_nid, $resourse_id) {

    return drupal_get_form('resource_view_form', $course_nid, $resourse_id);
}

function ntlp_resources_perm() {
    return array("delete resources", "ntlp view resources", "delete own resources", "delete comment", "ntlp resource view comment", "delete own comment");
}

function get_new_resrouce_frm() {

    return drupal_get_form('ntlp_resources_new_form');
}

function get_resrouce_frm() {

    return drupal_get_form('ntlp_resources_form');
}

function ntlp_resources_stuff() {

    return drupal_get_form('ntlp_resources_share_stuff');
}

function ntlp_resources_all_stuff_search($print = true) {

    if ($print)
        print drupal_get_form('ntlp_resources_share_stuff', true);
    else
        return drupal_get_form('ntlp_resources_share_stuff', true);
}

function ntlp_resources_stuff_contents() {
    return drupal_get_form('ntlp_resources_share_stuff');
}

function get_google_docs_frm() {
    modalframe_child_js();
    return drupal_get_form('google_docs_attachment');
}

function google_docs_attachment() {
    global $base_path;
    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/ntlp_resources.js');
//drupal_add_js(drupal_get_path('module', 'ntlp_courses_activity') . '/ntlp_courses_activity.js');

    drupal_set_title('Attach Google Doc');
    $path = $base_path;

    $form['googledocs'] = array(
//            '#title' => t('Attach Google Doc '),
//        '#type' => 'fieldset',
        '#id' => 'searchp',
    );

//    $form['googledocs']['finder'] = array(
//        '#type' => 'textfield',
//        '#size' => '40',
//        '#id' => 'finder',
//        '#attributes' => array('onkeypress' => "google_docs_search();"),
//        '#prefix' => '<div>',
//        '#suffix' => '</div>',
//    );

    $form['googledocs']['search_docs'] = array(
        '#type' => 'item',
        '#value' => '<div id="googledocs">' . get_google_docs(false) . '</div>',
    );

    $form['googledocs']['submit'] = array(
        '#type' => 'item',
        '#value' => '<a onmousedown=this.className="PostBtnClicked" onmouseup=this.className="PostBtn" class="PostBtn" style="text-align:center;" onclick="attach_google_docs();parent.Drupal.modalFrame.close();"> Submit</a>',
        '#prefix' => '<div style="float:left;width:80px;padding-top:10px">',
        '#suffix' => '</div>',
    );

    return $form;
}

function get_page_google_docs_frm() {
    modalframe_child_js();
    return drupal_get_form('google_docs_page_attachment');
}

function google_docs_page_attachment() {
    global $base_path;
    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/ntlp_resources.js');

    drupal_set_title('Attach Google Doc');
    $path = $base_path;

    $form['googledocs'] = array(
        '#id' => 'searchp',
    );

    $form['googledocs']['search_docs'] = array(
        '#type' => 'item',
        '#value' => '<div id="googledocs">' . get_google_docs(false) . '</div>',
    );

    $form['googledocs']['submit'] = array(
        '#type' => 'item',
        '#value' => '<a onmousedown=this.className="PostBtnClicked" onmouseup=this.className="PostBtn" class="PostBtn" style="text-align:center;" onclick="page_attach_google_docs();parent.Drupal.modalFrame.close();"> Submit</a>',
        '#prefix' => '<div style="float:left;width:80px;padding-top:10px">',
        '#suffix' => '</div>',
    );

    return $form;
}

function ntlp_resources_nodeapi(&$node, $op, $teaser, $page) {
    switch ($op) {
        case 'view':
            $node->content['ntlp_resources'] = array(
                '#value' => theme('node_resource', $node),
            );
            break;
    }
}

//function ntlp_resources_theme() {
//    return array(
//            'node_resource' => array(
//                    'arguments' => array('node'),
//            ),
//    );
//}

/**
 * A custom theme function.
 */
function view_comments_for_wall($node) {
    include("comment.template.inc");
    global $user;
    global $base_path;
    if (user_access('ntlp resource view comment')) {

        drupal_add_js(drupal_get_path('module', 'ntlp_project') . '/js/jquery.tipsy.js');
        drupal_add_js('
    function del_comment_tooltip(){
	$(".del_comment_tooltip").tipsy({"opacity" : 1, "gravity" : "ne" , arrowClass : "black-arrow-modal"});
     }', 'inline');

//        watchdog("comment_for_wall", print_r($node, true));
// Pre-process variables.
        $nid = $node->nid;
        if (empty($nid)) {
            $nid = 0;
        }
        $mode = _comment_get_display_setting('mode', $node);
//        $mode = _comment_get_display_setting('mode', $node);
        $order = _comment_get_display_setting('sort', $node);
        $comments_per_page = _comment_get_display_setting('comments_per_page', $node);

        if ($cid && is_numeric($cid)) {
// Single comment view.

            $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp,
                c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature,
                u.signature_format, u.picture, u.data, c.status
                FROM {comments} c
                INNER JOIN {users} u ON c.uid = u.uid
                WHERE c.cid = %d';

            $query_args = array($cid);
            if (!user_access('ntlp resource view comment')) {
                $query .= ' AND c.status = %d';
                $query_args[] = COMMENT_PUBLISHED;
            }

            $query = db_rewrite_sql($query, 'c', 'cid');
            $result = db_query($query, $query_args);

            if ($comment = db_fetch_object($result)) {
                $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
                $links = module_invoke_all('link', 'comment', $comment, 1);
                drupal_alter('link', $links, $node);

                $output .= theme('comment_view', $comment, $node, $links);
            }
        } else {
// Multiple comment view

            $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
            $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, nu.first_name, nu.last_name, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid  INNER JOIN {ntlp_user} nu ON nu.uid = u.uid WHERE c.nid = %d';

            $query_args = array($nid);
            if (!user_access('ntlp resource view comment')) {
                $query .= ' AND c.status = %d';
                $query_count .= ' AND c.status = %d';
                $query_args[] = COMMENT_PUBLISHED;
            }

            if ($order == COMMENT_ORDER_NEWEST_FIRST) {
                if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
                    $query .= ' ORDER BY c.cid DESC';
                } else {
                    $query .= ' ORDER BY c.thread DESC';
                }
            } else if ($order == COMMENT_ORDER_OLDEST_FIRST) {
                if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
                    $query .= ' ORDER BY c.cid';
                } else {
// See comment above. Analysis reveals that this doesn't cost too
// much. It scales much much better than having the whole comment
// structure.
                    $query .= ' ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))';
                }
            }
            $query = db_rewrite_sql($query, 'c', 'cid');
            $query_count = db_rewrite_sql($query_count, 'c', 'cid');

// Start a form, for use with comment control.
//            $result = pager_query($query, $comments_per_page, 0, $query_count, $query_args);
            $result = db_query($query, $query_args);

            $divs = 0;
            $num_rows = FALSE;
            $comments = '';
            drupal_add_css(drupal_get_path('module', 'comment') . '/comment.css');
            while ($comment = db_fetch_object($result)) {
                $comment = drupal_unpack($comment);
                $comment->name = $comment->uid ? l($comment->first_name . ' ' . $comment->last_name, 'ntlp/user/profile/' . $comment->uid, array('attributes' => array('style' => 'color: #009900;'))) : $comment->name;
                $comment->depth = count(explode('.', $comment->thread)) - 1;

                $content = $HTMLComment;
                $root = $base_path;
                $user_data = get_user_data($comment->uid);

//                if($comment->picture!="") {
//                    $content = str_replace("@POSTED_BY_IMAGE", '<img src="'.$root.$comment->picture.'" alt="'.$user_data->name.'" height="32" width="32" />', $content);
//                }else {
//                    $content = str_replace("@POSTED_BY_IMAGE", '<img src="'.$root.'themes/Boldr/Images/common/small_person_image_not_found.jpg" height="32" width="32" />', $content);
//                }

                $content = str_replace("@POSTED_BY_IMAGE", '<img src="' . is_user_image_exist($comment->picture) . '"; height="32" width="32" />', $content);

                $content = str_replace("@COMMENTS", nl2br($comment->comment), $content);
                $content = str_replace("@HEADING", $comment->name . ':', $content);

//                comment_owner($comment->cid);
//                $content = str_replace("@DELETE", l("Delete", 'ntlp/comments/delete/'.$comment->cid, array('attributes' => array('class' => 'popups-form-reload',) )), $content);
                $content = str_replace("@DATEDIFF", ago($comment->timestamp), $content);

//checking a permission for delete comments
                if (user_access('delete comment')) {
                    $content = str_replace("@DELETE", "<a class='del_comment_tooltip' onmouseover='del_comment_tooltip();' title='Delete Comment' id='comment_delete_$comment->cid' onclick='delete_comments_from_wall($comment->cid, $comment->nid)'></a>", $content);
                } else {
                    if (is_comment_owner($comment->cid, $user)) {
                        $content = str_replace("@DELETE", "<a class='del_comment_tooltip'  onmouseover='del_comment_tooltip();' title='Delete Comment' id='comment_delete_$comment->cid' onclick='delete_comments_from_wall($comment->cid, $comment->nid)'></a>", $content);
                    } else {
                        $content = str_replace("@DELETE", "", $content);
                    }
                }
                $contentDon .= $content;
            }
            return $contentDon;
        }
    }
}

function view_comments($node) {
    include("comment.template.inc");
    global $user;
    global $base_path;
    if (user_access('ntlp resource view comment')) {

// Pre-process variables.
        $nid = $node->nid;
        if (empty($nid)) {
            $nid = 0;
        }
        $mode = _comment_get_display_setting('mode', $node);


        $mode = _comment_get_display_setting('mode', $node);
        $order = _comment_get_display_setting('sort', $node);
        $comments_per_page = _comment_get_display_setting('comments_per_page', $node);


        if ($cid && is_numeric($cid)) {
// Single comment view.

            $query = 'SELECT c.cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, nu.first_name, nu.last_name, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid INNER JOIN {ntlp_user} nu ON nu.uid = u.uid WHERE c.cid = %d';
            $query_args = array($cid);
            if (!user_access('ntlp resource view comment')) {
                $query .= ' AND c.status = %d';
                $query_args[] = COMMENT_PUBLISHED;
            }

            $query = db_rewrite_sql($query, 'c', 'cid');
            $result = db_query($query, $query_args);

            if ($comment = db_fetch_object($result)) {
                $comment->name = $comment->uid ? l($comment->first_name . ' ' . $comment->last_name, 'ntlp/user/profile/' . $comment->uid, array('attributes' => array('style' => 'color: #009900;'))) : $comment->name;
                $links = module_invoke_all('link', 'comment', $comment, 1);
                drupal_alter('link', $links, $node);

                $output .= theme('comment_view', $comment, $node, $links);
            }
        } else {
// Multiple comment view

            $query_count = 'SELECT COUNT(*) FROM {comments} c WHERE c.nid = %d';
            $query = 'SELECT c.cid as cid, c.pid, c.nid, c.subject, c.comment, c.format, c.timestamp, c.name, c.mail, c.homepage, u.uid, u.name AS registered_name, u.signature, u.signature_format, u.picture, u.data, c.thread, c.status FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.nid = %d';

            $query_args = array($nid);
            if (!user_access('ntlp resource view comment')) {
                $query .= ' AND c.status = %d';
                $query_count .= ' AND c.status = %d';
                $query_args[] = COMMENT_PUBLISHED;
            }

            if ($order == COMMENT_ORDER_NEWEST_FIRST) {
                if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
                    $query .= ' ORDER BY c.cid DESC';
                } else {
                    $query .= ' ORDER BY c.thread DESC';
                }
            } else if ($order == COMMENT_ORDER_OLDEST_FIRST) {
                if ($mode == COMMENT_MODE_FLAT_COLLAPSED || $mode == COMMENT_MODE_FLAT_EXPANDED) {
                    $query .= ' ORDER BY c.cid';
                } else {
// See comment above. Analysis reveals that this doesn't cost too
// much. It scales much much better than having the whole comment
// structure.
                    $query .= ' ORDER BY SUBSTRING(c.thread, 1, (LENGTH(c.thread) - 1))';
                }
            }
            $query = db_rewrite_sql($query, 'c', 'cid');
            $query_count = db_rewrite_sql($query_count, 'c', 'cid');

// Start a form, for use with comment control.
            $result = pager_query($query, $comments_per_page, 0, $query_count, $query_args);

            $divs = 0;
            $num_rows = FALSE;
            $comments = '';
            drupal_add_css(drupal_get_path('module', 'comment') . '/comment.css');
            while ($comment = db_fetch_object($result)) {
                $comment = drupal_unpack($comment);
                $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
                $comment->depth = count(explode('.', $comment->thread)) - 1;

                $content = $HTMLComment;
                $root = $base_path;
                $user_data = get_user_data($comment->uid);

//                if($comment->picture!="") {
//                    $content = str_replace("@POSTED_BY_IMAGE", '<img src="'.$root.$comment->picture.'" alt="'.$user_data->name.'" height="32" width="32" />', $content);
//                }else {
//                    $content = str_replace("@POSTED_BY_IMAGE", '<img src="'.$root.'themes/Boldr/Images/common/small_person_image_not_found.jpg" height="32" width="32" />', $content);
//                }
                $content = str_replace("@POSTED_BY_IMAGE", '<img src="' . is_user_image_exist($comment->picture) . '"; height="32" width="32" />', $content);

                $content = str_replace("@COMMENTS", nl2br($comment->comment), $content);
                $content = str_replace("@HEADING", $user_data->name . ':', $content);

//                comment_owner($comment->cid);
//                $content = str_replace("@DELETE", l("Delete", 'ntlp/comments/delete/'.$comment->cid, array('attributes' => array('class' => 'popups-form-reload',) )), $content);
                $content = str_replace("@DATEDIFF", ago($comment->timestamp), $content);

//checking a permission for delete comments
                if (user_access('delete comment')) {
                    $content = str_replace("@DELETE", "<a class='ntlp_tooltip_n' title='Delete Comment' id='comment_delete_$comment->cid' onclick='delete_comments_from_single($comment->cid, $comment->nid)'></a>", $content);
                } else {
                    if (is_comment_owner($comment->cid, $user)) {
                        $content = str_replace("@DELETE", "<a class='ntlp_tooltip_n' title='Delete Comment' id='comment_delete_$comment->cid' onclick='delete_comments_from_single($comment->cid, $comment->nid)'></a>", $content);
                    } else {
                        $content = str_replace("@DELETE", "", $content);
                    }
                }
                $contentDon .= $content;
            }
            return $contentDon;
        }
    }
}

function ago($timestamp) {
    $difference = time() - $timestamp;
    $text = format_interval($difference, 1) . " ago";
    return $text;
}

function _get_resource_render($node, $user_role = null) { // render a resource for wall
    include "resource_node.template.inc";

    global $base_path, $user;
    drupal_add_js(drupal_get_path('module', 'ntlp_project') . '/js/jquery.tipsy.js');
    drupal_add_js('
     function show_tooltip(){
	$(".comment_tooltip").tipsy({"opacity" : 1, title : "newTitle"});
     }', 'inline');

    $url = $_GET['q'];
    $args = explode('/', $url);

    modalframe_parent_js();
    drupal_add_js(drupal_get_path('module', 'ntlp_school') . '/modalframe_setup.js');
//    drupal_add_js(drupal_get_path('module', 'ntlp_school') . '/tipsy_tooltip.js');
    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/ntlp_resources.js');


    $project_nid = 0;
    $course_id = 0;
    $root = $base_path;
    $resource = get_resource_info($node);

    $is_group_resource = is_resource_exist_in_group($node, $user);
    $content = $HTMLContentLink;
    $content = str_replace("@RESOURCE_DESCRIPTION", nl2br($resource->body), $content);

//    $course_node = node_load($resource->course_nid);
    watchdog('stuff_wall', print_r($resource, true));
    if ($resource->course_nid != null) {
        $type = node_get_types('type', $node);
//        $resource_type = get_resourse_type($resource->type);
//        $course_name = get_course_name($resource->course_nid);
//        $project_name = get_course_name($resource->project_nid);
        $user_data = get_user_data($resource->user_uid);
//        $section_name = get_course_section_name($resource->project_nid, $resource->section_tid);

        switch ($resource->type) {
            case "lo_document":

                //themes/Boldr/Images/resourceStuff/img_document.png
                $content = str_replace("@RESOURCE_PREVIEW", '
                    <div class="@ICON_RESOURCE" style="float: left; width: 16px;margin-right:6px;"></div>
                    <div  style="float: left; width:520px;" ><a href="@RESOURCE_PATH" class="green_link" @TARGET> @FILE_NAME</a></div>', $content);

                $content = str_replace("@RESOURCE_PADDING", '<tr><td>&nbsp;</td></tr>', $content);

                if ($resource->dtype == 'U') {
                    if (empty($resource->attachment_name)) {
                        $file_path = explode("_", $resource->filename);
                        unset($file_path[0]);
                        unset($file_path[1]);
                        $file_name = implode($file_path, '_');
                    } else {
                        $file_name = $resource->attachment_name;
                    }
                    $content = str_replace("@RESOURCE_PATH", $resource->filepath, $content);
                    $content = str_replace("@FILE_NAME", $file_name, $content);
                } else {
                    if (!empty($resource->path) && $resource->path != '') {
                        $docname = empty($resource->attachment_name) ? 'Google Document' : $resource->attachment_name;
                        $content = str_replace("@RESOURCE_PATH", $resource->path, $content);
                        $content = str_replace("@FILE_NAME", $docname, $content);
                    } else {
                        $content = str_replace("@RESOURCE_PATH", '#', $content);
                        $content = str_replace("@FILE_NAME", $resource->attachment_name . "&nbsp;<Broken Google Document link>", $content);
                    }
                }
                $content = str_replace("@TARGET", 'target="_blank"', $content);                
                if (empty($resource->attachment_name)) {
                    $resource_path = $resource->path;
                } else {
                    $resource_path = $resource->attachment_name;
                }
                $content = str_replace("@ICON_RESOURCE", _get_resource_type_icons($resource->type, $resource_path, $resource->dtype), $content);
                break;
            case "lo_link":
                $content = str_replace("@RESOURCE_PREVIEW", '
                        <div class="@ICON_RESOURCE" style="float: left; width: 16px;margin-right:6px;"></div>
                        <span><a href="@RESOURCE_PATH" class="green_link" target="_blank">@RESOURCE_TITLE</a></span>', $content);

                $content = str_replace("@ICON_RESOURCE", _get_resource_type_icons($resource->type, $resource->attachment_name, $resource->dtype), $content);
                $content = str_replace("@RESOURCE_PATH", $resource->path, $content);

                $content = str_replace("@RESOURCE_PADDING", '<tr><td>&nbsp;</td></tr>', $content);

                break;
            case "lo_image":
//                $resource_obj = get_attahced_file_detail($resource->fid);

                if (file_exists($_SERVER['DOCUMENT_ROOT'] . $base_path . $resource->filepath)) {
                    list($width, $height, $type, $attr) = getimagesize($_SERVER['DOCUMENT_ROOT'] . $base_path . $resource->filepath);
                    if ($width > 680) {
                        $width = 680;
                    }
                } else {
                    
                }

                $content = str_replace("@RESOURCE_PREVIEW", '
                    <div style=" max-width:320px; width:auto !important; width:320px; "  class="">
                     <!--<a href="@IMAGE_PATH" class="modalframe-setup-child modalframe-setup-size[320,320]"></a>-->

                     ' . dlg('<img src="@IMAGE_PATH" style="align:center; valign:center; max-width:320px; width:auto !important; width:320px; border: 1px solid #999; padding:5px;" class="green_hover" >', 'ntlp/courses/resources/allstuff/view/' . $resource->fid, $height, $width, NULL, TRUE)
                        . '</div>', $content);


                $content = str_replace("@RESOURCE_PADDING", '<tr><td>&nbsp;</td></tr>', $content);

                $content = str_replace("@IMAGE_PATH", $resource->filepath, $content);
                watchdog("image path", $resource->filepath);

                break;

            case "lo_video":

                $content = str_replace("@RESOURCE_PREVIEW", '
                    <div style="width: 320px; height:240px;" class="gray-border">
                        @VIDEO
                    </div>', $content);

                $content = str_replace("@RESOURCE_PADDING", '<tr><td>&nbsp;</td></tr>', $content);

                if ($resource->dtype == 'U') {
                    $resrouce_obj = get_attahced_file_detail(abs($resource->fid));
//                    $content = str_replace("@VIDEO", '
//			<script type="text/javascript">
//			flowplayer("player_'.$resource->nid.'", "' . $root . 'themes/Boldr/flowplayer/flowplayer-3.1.5.swf");
//                        </script>
//
//                        <table cellpadding="0" cellspacing="0" border="0" width="100%"><tr><td class="Flash">
//                        <div id="page"><a href="' . $root . $resrouce_obj->filepath . '" class="Boldrplayer"
//                        id="player_'.$resource->nid.'"><img src="' . $root . 'themes/Boldr/Images/flashImg.jpg" alt="Image" style="width: 320px; " /></a></div>
//                        </td></tr></table>', $content);
//                    $content = str_replace("@VIDEO", theme('flowplayer', $root . $resrouce_obj->filepath), $content);
                    $content = str_replace("@VIDEO", '
                        <a href="' . $root . $resrouce_obj->filepath . '" class="Boldrplayer" id="player_' . $resource->nid . '" style="display:block;width:320px;height:240px">
                        <img src="' . $root . 'themes/Boldr/Images/flashImg.jpg" alt="Video" style="width: 320px;" /></a>'
                            , $content);
                    flowplayer_add('#player_' . $resource->nid, array('clip' => array(
                            'autoPlay' => TRUE,
                        ),
                    ));
                } else if ($resource->dtype == 'E') {

                    $resource_path = $resource->path;

                    $resource_path = str_replace("width=", " width=320px ", $resource_path);
                    $resource_path = str_replace("height=", " height=240px ", $resource_path);

                    $resource_path = str_replace("width:", " width:320px; ", $resource_path);
                    $resource_path = str_replace("height:", " height:240px; ", $resource_path);

                    $content = str_replace("@VIDEO", $resource_path, $content);
                }

                break;
        }

        $content = str_replace("@RESOURCE_PREVIEW", '', $content);
        $content = str_replace("@RESOURCE_PADDING", '', $content);

        $content = str_replace("@BASE_PATH", $base_path, $content);

        $content = str_replace("@POSTED_BY_IMAGE", '<img src="' . is_user_image_exist($user_data->picture) . '"; height="32" width="32" />', $content);

        $content = str_replace("@POSTED_BY_NAME", l($user_data->first_name . ' ' . $user_data->last_name, 'ntlp/user/profile/' . $user_data->uid, array('attributes' => array('style' => 'color: #009900;'))), $content);

        $content = str_replace("@RESOURCE_TITLE", $resource->title, $content);

        $likethispost = flag_get_counts('node', $resource->nid);
        $persons = get_like_this_post_person_info($resource->nid);

        if ($likethispost['likethispost'] > 1) {
            $like_info = '<a href="javascript:;" class="tooltipLikesBtn">' . $likethispost['likethispost'] . ' people like this </a>';
        } else if ($likethispost['likethispost'] == 1) {
            $like_info = '<a href="javascript:;" class="tooltipLikesBtn">' . $likethispost['likethispost'] . ' person likes this </a>';
        }

        $tooltipLikes = '';
        if ($persons) {
            foreach ($persons as $person) {
                $tooltipLikes .= '<li>' . l("$person->first_name $person->last_name", 'ntlp/user/profile/' . $person->uid, array('attributes' => array('style' => 'color: #FFFFFF;'))) . '</li>';
            }
        }

        $like_post_counts = '<div style="width: 140px; float: left; margin-left: 215px;">
                                <div style="text-align: right;">
                                <img src="' . $base_path . 'themes/Boldr/Images/common/img_like.png" align="absmiddle" />
                                ' . $like_info . '
                                <div id="toolitip_' . $resource->nid . '" class="tooltipLikes tipsy" style="position: absolute; right: 0px; display: none;">
                                    <div style="text-align: left; font-size: 12px; padding-bottom: 4px; background-color: #000000; padding-left: 8px; padding-right: 8px; padding-top: 5px;">
                                        <div style="float: right; font-size: 12px;"></div>
                                        <div style="clear: both;"></div>
                                        <ul>
                                        ' . $tooltipLikes . '
                                        </ul>
                                    </div>
                                </div>
                             </div>
                             </div>
                            ';

        if ($likethispost != null) {
            $content = str_replace("@LIKE_COUNTS", $like_post_counts . '', $content);
        } else {
            $content = str_replace("@LIKE_COUNTS", '', $content);
        }

//Need to sync this check below with the same check in resource_view.inc
//Role maybe set for student or parent's kid, but they are not allowed to delete
//On delete button, keep the user on the same page
        if ($is_group_resource) {

            if (is_user_group_admin($resource->course_nid, $user) || is_node_owner($resource->nid, $user)) {
                $content = str_replace("@DELETE", '<a onclick="onclick_remove_resource(' . $resource->nid . ', false)" > </a>', $content);
            } else {
                $content = str_replace("@DELETE", "", $content);
            }
        } else {

            if ((isset($user_role) && ($user_role == NTLP_ROLEID_TEACHER || $user_role == NTLP_ROLEID_SCHOOLLEADER || $user_role == NTLP_ROLEID_SITEADMIN ||
                    $user_role == NTLP_ROLEID_NETWORKMANAGER || $user_role == NTLP_ROLEID_NETWORKSTAFF)) || is_node_owner($resource->nid, $user)) {
                $content = str_replace("@DELETE", '<a onclick="onclick_remove_resource(' . $resource->nid . ', false)" > </a>', $content);
            } else {
                if (is_node_owner($resource->nid, $user)) {
                    $content = str_replace("@DELETE", '<a onclick="onclick_remove_resource(' . $resource->nid . ', false)" > </a>', $content);
                } else {
                    $content = str_replace("@DELETE", "", $content);
                }
            }
        }

        $content = str_replace("@ADDLIKING", flag_create_link('likethispost', $resource->nid), $content);

        $content = str_replace("@ADDNEWCOMMENT", "<a onclick='focus_func($resource->nid)' onmouseover='show_tooltip()' newTitle='Add Comment' class='comment_tooltip'> <img src='" . $root . "themes/Boldr/Images/AddComment.jpg' /></a>", $content);
        $content = str_replace("@DATEDIFF", ago($resource->changed), $content);
        $content = str_replace("@ROOT", $root, $content);

        if ($resource->type == "lo_share_idea") {
            $content = str_replace("@RESOURCE_DESCRIPTION", $resource->body, $content);
        } elseif ($resource->teaser != "") {
            $content = str_replace("@RESOURCE_DESCRIPTION", $resource->teaser, $content);
        } else {
            $content = str_replace("@RESOURCE_DESCRIPTION", $resource->body, $content);
        }

        if ($node->comment == 2) {

            $nodeComments = view_comments_for_wall($node);
            $nodeComments = "<div id=\"comment-wrapper-$resource->nid\">$nodeComments</div>";
            $content = str_replace("@COMMENTS", $nodeComments, $content);
            $commentsadd = "<textarea style='display:none' id='txt_$resource->nid' rows='2' cols='70' title='Add a comment...'></textarea>";
            $commentsadd .= "<a style='display:none' id='comment_new_$resource->nid' class='CommentBtn' onclick='comments_post_new($resource->nid)'>Comment</a>";
            $content = str_replace("@ADDCOMMENTSFORM", $commentsadd, $content);
        } else {
            $content = str_replace("@COMMENTS", "", $content);
            $content = str_replace("@ADDCOMMENTSFORM", "", $content);
        }
        $content_type = 'node';
        $header_content = $HTMLHeader;
        $header_content = str_replace("@BACK_LINK", '', $header_content);

        $header_content = str_replace("@RESOURCE_NID", $resource->nid, $header_content);

        return '<div id="node-' . $resource->nid . '">' . $header_content . $content . $HTMLFooter . '</div>';
    }
}

function comments_post_new($resource_nid) {
    global $user;

    $text = $_POST['comment-body'];
    $edit['nid'] = $resource_nid;
    $edit['pid'] = 0;
    $edit['uid'] = $user->uid;
    $edit['name'] = $user->name;
    $edit['comment'] = $text;
    $edit['format'] = 1;
    $edit['subject'] = '';
    $edit['format'] = '';
    $edit['hostname'] = '';
    $edit['timestamp'] = '';
    $edit['status'] = '';
    $edit['thread'] = '';
    $edit['mail'] = '';
    $edit['homepage'] = '';
    $edit['node-context'] = 'node_uid';
//    watchdog('comments', print_r($edit, true));

    comment_save($edit);
    $node = node_load($resource_nid);
//    node_view($node, false);


    print view_comments_for_wall($node); //_get_resource_render($node);
//    drupal_set_message(t('Your comment has been added successfully.'));
//    return true;
}

function post_comments_new($resource_nid, $text) {

    global $user;

    $edit['nid'] = $resource_nid;
    $edit['pid'] = 0;
    $edit['uid'] = $user->uid;
    $edit['name'] = $user->name;
    $edit['comment'] = $text;
    $edit['format'] = 1;
    $edit['subject'] = '';
    $edit['format'] = '';
    $edit['hostname'] = '';
    $edit['timestamp'] = '';
    $edit['status'] = '';
    $edit['thread'] = '';
    $edit['mail'] = '';
    $edit['homepage'] = '';
    $edit['node-context'] = 'node_uid';
//    watchdog('comments', print_r($edit, true));

    comment_save($edit);
    $node = node_load($resource_nid);
//    node_view($node, false);

    print view_comments($node); //render_single_resource_view($node->nid);
//    drupal_set_message(t('Your comment has been added successfully.'));
//    return true;
}

function _delete_comment_from_wall($comment_id, $resource_nid) {

    resource_comment_delete($comment_id);
    $node = node_load($resource_nid);

//    watchdog("delete_comment", '_delete_comment_from_wall called');
//    print _get_resource_render($node);
    print view_comments_for_wall($node);
}

function _delete_comment_from_single_view($comment_id, $resource_nid) {


    resource_comment_delete($comment_id);
    print render_single_resource_view($resource_nid);
}

/**
 * Menu callback; delete a comment.
 *
 * @param $cid
 *   The comment do be deleted.
 */
function resource_comment_delete($cid = NULL) {
    $comment = db_fetch_object(db_query('SELECT c.*, u.name AS registered_name, u.uid FROM {comments} c INNER JOIN {users} u ON u.uid = c.uid WHERE c.cid = %d', $cid));
    $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
    $output = '';

//    comment_delete($cid);

    if (is_object($comment) && is_numeric($comment->cid)) {
        ntlp_comment_confirm_delete_submit($comment);
    } else {
        drupal_set_message(t('The comment no longer exists.'));
    }

    return $output;
}

/**
 * Process comment_confirm_delete form submissions.
  Overrides the original comment module function: comment_confirm_delete_submit($comment);
 */
function ntlp_comment_confirm_delete_submit($comment) {
// Delete comment and its replies.
//    _comment_delete_thread($comment);

    db_query('DELETE FROM {comments} WHERE cid = %d', $comment->cid);
//    _comment_update_node_statistics($comment->nid);
// Clear the cache so an anonymous user sees that his comment was deleted.
//    cache_clear_all();
//    $form_state['redirect'] = "node/$comment->nid";
}

function _node_delete_frm($course_id, $node_id) {
    return drupal_get_form("node_delete_form", $course_id, $node_id);
}

function node_delete_form($form = null, $course_id, $node_id) {

    modalframe_child_js();

//    echo $node_id;
    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/ntlp_resources.js');

//    watchdog('node_delete', $course_id .' '.$node_id);

    drupal_set_title("Delete Resource");
    $resource_node = load_resource_record($node_id);


    $form['node_delete'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE, // Don't forget to set #tree!
    );


    $form['node_delete']['course_id'] = array(
        '#type' => 'hidden',
        '#value' => $course_id,
        '#prefix' => '<div style="display:none">',
        '#suffix' => '</div>',
    );

    $form['node_delete']['sectin_tid'] = array(
        '#type' => 'hidden',
        '#value' => $resource_node->section_tid == 0 ? 0 : $resource_node->section_tid,
        '#id' => 'sectin_tid',
    );

    $form['node_delete']['node_id'] = array(
        '#type' => 'hidden',
        '#value' => $node_id,
        '#prefix' => '<div style="display:none">',
        '#id' => 'node_id',
        '#suffix' => '</div>',
    );

    $form['node_delete']['message'] = array(
        '#type' => 'item',
        '#value' => 'You are about to permanently delete this resource and any associated comments. This will also remove the resource from its project briefcases that currently link to it.<p> Are you sure you want to permanently delete this item?</p>',
        '#prefix' => '<div> ',
        '#suffix' => '</div>',
    );

    if ($resource_node->section_tid != 0) {
        $option = '<a onclick="delete_resource_from_course()">Delete From Course</a> ';
        $option .= ' <a onclick="delete_resource_from_project()">Delete From Project</a>';
    } else {
        $option = '<a onclick="delete_resource_from_course()">Delete</a>';
    }

    $option = '<span style="float: left;"><a class="SaveBtn" onclick="delete_resource_from_project()">Delete</a></span>';
    $form['node_delete']['node_delete_button'] = array(
        '#type' => 'item',
        '#value' => $option . '<span style="float: left;padding-left: 2px;" ><a  class="SaveBtn" style="text-align:center;" onclick="delete_resource_cancel()">Cancel</a></span>',
        '#prefix' => '<div style="clear: both;float: left;padding-top: 10px;"> ',
        '#suffix' => '</div>',
    );

    return $form;
}

function load_resource_record($node_id) {

    $result = db_query("SELECT cr.*, pr.*  FROM {ntlp_course_resource} cr
        INNER JOIN {node} n ON n.nid = cr.nid
        INNER JOIN {node_revisions} nr ON nr.nid = cr.nid
        LEFT JOIN {ntlp_project_resource} pr ON pr.nid = cr.nid
        WHERE cr.nid = %d", $node_id);

    return db_fetch_object($result);
}

function node_delete_data($node_id, $section_tid) {
    global $user;

//    watchdog('resource delete', 'requested node id for delete '.$node_id.' section tid '.$section_tid);

    $resource_node = load_resource_record($node_id);

    if ($section_tid > 0) {
//        db_query("UPDATE {ntlp_course_resource} SET  deleted_by = %d WHERE nid =%d", $user->uid, $node_id );
        db_query("DELETE FROM {ntlp_project_resource} WHERE nid =%d", $node_id);
    } else {
        db_query("UPDATE {ntlp_course_resource} SET  deleted_by = %d , deleted_on = '%s'
            WHERE nid =%d", $user->uid, strftime(DATE_FORMAT, time()), $node_id);

        db_query("DELETE FROM {ntlp_project_resource} WHERE nid =%d", $node_id);
    }

//    drupal_goto('ntlp/goback');
}

/**
 * Retrieves the resourse information for
 * specified node.
 */
function get_resource_info($node) {
    $sql = "SELECT node.nid, node.type, node.uid as user_uid, node.status, node.created, node.changed,
        revs.title, revs.body, revs.teaser, 
        res.course_nid, res.type as dtype, res.attachment_name, res.path, f.*
        FROM {node} node
        LEFT JOIN {node_revisions} revs ON node.nid = revs.nid
        LEFT JOIN {ntlp_course_resource} res ON node.nid = res.nid
        LEFT JOIN {files} f ON f.fid = res.fid
        WHERE node.nid =%d";
//    pr.section_tid, pr.availability
//        LEFT JOIN {ntlp_project_resource} pr ON node.nid = pr.nid
//echo '<span style="color:white">'.$sql .'</span>';
    $resource = db_fetch_object(db_query($sql, $node->nid));
    return $resource;
}

function get_attahced_file_detail($file_id) {

    $result = db_query("SELECT fid, uid, filename, filepath, filemime, filesize, timestamp, status FROM
        {files} WHERE fid = %d", $file_id);

    return db_fetch_object($result);
}

function get_user_data($uid) {
    $sql = "SELECT * FROM dpl_users us left join dpl_ntlp_user nus on us.uid=nus.uid WHERE us.uid =%d";
    $user_data = db_fetch_object(db_query($sql, $uid));
    return $user_data;
}

/**
 * Retrieves the resourse type freindly name for
 * specified resourse type.
 */
function get_resourse_type($resourse_type) {
    $sql = "select friendly_name from {ntlp_resource_type} where machine_name='%s'";
    $resourse_type = db_fetch_object(db_query($sql, $resourse_type));
    return $resourse_type->friendly_name;
}

function get_course_section_name($project_nid, $section_tid) {
    $sql = "select name from {ntlp_course_section} csection
            left join dpl_term_data term
            on csection.tid = term.tid
            where csection.course_nid=%d and csection.tid=%d";
    $course_section = db_fetch_object(db_query($sql, $project_nid, $section_tid));
    return $course_section->name;
}

function get_course_name($course_nid) {
    $sql = "SELECT
        revs.title
        FROM dpl_node node
        LEFT JOIN {node_revisions} revs ON node.nid = revs.nid
        WHERE node.nid =%d";
    $course = db_fetch_object(db_query($sql, $course_nid));
    return $course->title;
}

function get_resource_attachment($resource_nid) {
//    echo $resource_nid;
    return db_query("SELECT ra.*, f.filename, f.filepath, f.fid, f.filemime
        FROM {ntlp_resource_attachment} ra
        LEFT JOIN {files} f on ra.pebl_attachment_fid = f.fid
        WHERE ra.resource_nid =%d
        ORDER BY ra.order_number", $resource_nid);
}

function ntlp_resources_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks[0] = array(
                'info' => t('NTLP: Resource Stuff'),
                'status' => TRUE,
                'weight' => 0,
                'visibility' => 1,
                'pages' => 'nav/*',
            );

            return $blocks;
        case 'configure':
            $form = array();
            return $form;

        case 'save':


        case 'view': default:
            switch ($delta) {
                case 0:

                    $block['subject'] = t('NTLP: Resource Stuff');
                    $block['content'] = ntlp_resources_stuff_contents();
                    break;
            }

            return $block;
    }
}

function is_node_owner($node_id, $user) {

    $flag = false;

    $node_Obj = node_load($node_id);

    if ($user->uid == $node_Obj->uid) {
        $flag = true;
    } else {
        $flag = false;
    }

    return $flag;
}

function is_comment_owner($cid, $user) {

    $flag = false;
//    watchdog('comment ',print_r(_comment_load($cid), true));

    $commentObj = _comment_load($cid);
    if ($user->uid == $commentObj->uid) {
        $flag = true;
    } else {
        $flag = false;
    }
    return $flag;
}

function ntlp_resources_theme() {

    return array(
// The form ID.
        'ntlp_resources_new_form' => array(
// Forms always take the form argument.
            'arguments' => array('form' => NULL),
        ),
    );
}

function theme_ntlp_resources_new_form($form) {

    $variables_to_restore = cache_get("ntlp_resource:" . session_id(), 'cache');
    $variables_to_restore = $variables_to_restore->data;
//    watchdog("theme", 'Variables:'. is_object($variables_to_restore) . '<br>'. print_r($variables_to_restore, true));
    if (!empty($variables_to_restore) && is_object($variables_to_restore)) {
        $resource_nid = $variables_to_restore->resource_nid;
        $selected_resource = $variables_to_restore->selected_resource;

        $form['add_resources']['edit_resource']['#value'] = $resource_nid;
        $form['add_resources']['resource_name']['#value'] = $variables_to_restore->resource_name;
        $form['add_resources']['selected_resource']['#value'] = $selected_resource;
        $form['add_resources']['description']['#value'] = $variables_to_restore->description;

        $module_nid = $variables_to_restore->course_nid;
        $form['add_resources']['featured_resource']['#value'] = $variables_to_restore->featured_resource;
        $form['add_resources']['last_state_url']['#value'] = $variables_to_restore->last_state;
//        $form['add_resources']['is_shared']['#value'] = $variables_to_restore->is_shared;
        $form['add_resources']['project']['#value'] = $variables_to_restore->project;
        $form['add_resources']['project_row']['project_div']['project_section']['#value'] = $variables_to_restore->project_section;

        if ($variables_to_restore->selected_resource == 'lo_document' && $variables_to_restore->google_radio == 'gdocs') {
            $linksarray = get_google_links($variables_to_restore->google_hAttachedFiles);
            foreach ($linksarray as $l) {
                list($vtype, $vupload_fileid, $vupload_filename, $vupload_filepath) = $l;
                if (!empty($vtype) && $vtype != 'X') {
                    $attached_files_data .= '<div id="G_' . $resource_nid . '">' .
                            '<img style="position:relative;top:2px;margin-right:4px;" onclick="doc_delete_attachment(\'G_' . $resource_nid . '\');" width="14" height="14" src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" />' .
                            '<a href="' . $vupload_filename . '" target="_blank">' . $vupload_filepath . '</a></div>';
//                $attached_files_data .= '<div id="F_' . abs($vupload_fileid) . '"> <a onclick="other_delete_attachment(\'F_' . abs($vupload_fileid) . '\');" ><img src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" /></a>&nbsp;&nbsp;' . $vupload_filename . '</div>';
                    $display_link = 'display:none';
                }
            }
        } else {
            $linksarray = get_google_links($variables_to_restore->attached_files_hidden);
            foreach ($linksarray as $l) {
                list($vtype, $vupload_fileid, $vupload_filename, $vupload_filepath) = $l;
                if (!empty($vtype) && $vtype != 'X') {
                    $attached_files_data .= '<div id="F_' . abs($vupload_fileid) . '">' .
                            '<img style="position:relative;top:2px;margin-right:4px;" onclick="other_delete_attachment(\'F_' . abs($vupload_fileid) . '\');" width="14" height="14" src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" />' .
                            '<a href="' . $vupload_filename . '" target="_blank">' . $vupload_filepath . '</a></div>';
//                $attached_files_data .= '<div id="F_' . abs($vupload_fileid) . '"> <a onclick="other_delete_attachment(\'F_' . abs($vupload_fileid) . '\');" ><img src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" /></a>&nbsp;&nbsp;' . $vupload_filename . '</div>';
                    $display_link = 'display:none';
                }
            }
        }
        $attach_fileupload_link = '
             <div id="attach_links_panel" style="display:block;cursor: pointer !important; clear:both;">
             <div onmouseover="place_fileupload_control(\'edit-add-resources-upload-control\', this);" onmouseout="place_fileupload_control_mouseout(this);" >
               <div class="clearfix">
                  <span id="attach_link_prompt"><span style="color:#000">+&nbsp;</span>
                  <a id="attach_link" class="project_resource_Green_text" style="' . $display_link . '">Attach file</a>
                  </span>
                  <div id="attach_links" style="width:auto;">' . $attached_files_data . '</div>
                  <div id="attach_link_suffix" style="padding-top:10px;' . $display_link . '">Max file size = 5 MB</div>
               </div>
               <span id="attach_link_tip" class="pro_box">Accepted file formats: JPG, PNG, GIF</span>
             </div>
             </div></td></tr>';

        $form['add_resources']['upload_control']['#prefix'] = $attach_fileupload_link;

        $form['add_resources']['attached_files_hidden']['#value'] = $variables_to_restore->attached_files_hidden;

        if ($selected_resource == 'lo_document') {
            $form['add_resources']['google_radio']['#value'] = $variables_to_restore->google_radio;
        } else if ($selected_resource == 'lo_image' || $selected_resource == 'lo_video') {
            $form['add_resources']['other_resource_link']['#value'] = $variables_to_restore->other_resource_link;
            $form['add_resources']['resource_radio']['#value'] = $variables_to_restore->resource_radio;
        } else if ($selected_resource == 'lo_page') {
            $form['add_resources']['page_data']['#value'] = $variables_to_restore->page_data;
//File upload controls for Page Resource
            $linksarray = get_google_links($variables_to_restore->page_attached_files);
            foreach ($linksarray as $l) {
                list($att_id, $vtype, $vupload_fileid, $vupload_filename, $vupload_filepath) = $l;
                if (!empty($vtype) && $vtype != 'X') {
                    $attached_files_data .= '<div id="' . $vtype . '_' . $att_id . '">
                        <img style="position:relative;top:2px;margin-right:4px;" onclick="page_delete_attachment(\'' . $vtype . '_' . $att_id . '\');" width="14" height="14" src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" />
                        <a href="' . $vupload_filename . '" target="_blank">' . $vupload_filepath . '</a></div>';
//                    $attached_files_data .= '<div id="'.$vtype.'_' . abs($att_id) . '"><a onclick="page_delete_attachment(\'F_' . abs($vupload_fileid) . '\');" ><img src="' . $base_path . 'themes/Boldr/Images/DeleteBtn.png" border="0" /></a>&nbsp;&nbsp;' . $vupload_filename . '</div>';
                }
            }

            $attach_fileupload_link = '<span style="float:left;text-decoration:none;color: #3399CC;" id="attach_link_prompt"><span style="color:#000">+&nbsp;</span><a class="project_resource_Green_text" id="attach_link">Attach file</a></span>';
            $google_attach_link = '<div style="z-index:100;position:relative;width: 200px;"><span style="color:#000">+&nbsp;</span>' . dlg("Link Google Doc", 'ntlp/course/resources/attachment/pagegoogle', 300, 600, 'project_resource_Green_text') . '</div>';

            $form['add_resources']['pageattachments_upload_control']['#prefix'] = '<tr id="page_attachments" style="display:none"><th >' . t('Attachments*') . '</th><td>
                <table style="border-bottom:none;" width="100%" border="0" cellspacing="0" cellpadding="0"><tr id="page_attachments_tr">
                <td style="border-bottom:none;" onmouseover="place_fileupload_control(\'edit-add-resources-pageattachments-upload-control\', this);" onmouseout="place_fileupload_control_mouseout(this);" >' . $attach_fileupload_link;
            $form['add_resources']['pageattachments_upload_control']['#suffix'] = '</td><td style="border-bottom:none;" ><div style"width:25px"></div>' . $google_attach_link . '</td>
                <td style="border-bottom:none;" ><div class="pro_box">&nbsp; Multiple attachments allowed.</div></td></tr>
                <tr><td style="border-bottom:none;" colspan="3">
                <div id="page_attach_links" style="float:left;width:auto;" class="attach_link_forum" >' . $attached_files_data . '</div>
                </td></tr></table>
                </td></tr>';

            $form['add_resources']['page_attached_files_hidden']['#value'] = $variables_to_restore->page_attached_files;
        } else if ($selected_resource == 'lo_link') {
            $form['add_resources']['attach_link_for_link']['#value'] = $variables_to_restore->attach_link_for_link;
        }
    }

    auto_upload_align_attach_control('edit-add-resources-upload-control');
    auto_upload_align_attach_control('edit-add-resources-pageattachments-upload-control', true);
    drupal_add_js(drupal_get_path('module', 'ntlp_school') . '/fileupload_ahah_helper.js');

    cache_set("ntlp_resource:" . session_id(), null, 'cache', CACHE_TEMPORARY);

    drupal_add_js('
    function clearText(field){
    if (field.defaultValue == field.value){
        field.value = "";
        $("#"+field.id).css("color","black");
    } else if (field.value == "") {
        field.value = field.defaultValue;
         $("#"+field.id).css("color","#999999");
        }
}', 'inline');

    $output = drupal_render($form);
    return $output;
}

function get_like_this_post_person_info($resource_nid) {

    $result = db_query("SELECT nu.uid, nu.first_name, nu.last_name FROM {flag_content} fc
        INNER JOIN {ntlp_user} nu ON fc.uid = nu.uid
        WHERE fc.content_id = %d", $resource_nid);

    if ($result->num_rows > 0) {
        while ($data = db_fetch_object($result)) {
            $like_person[] = $data;
        }

        return $like_person;
    } else {
        return false;
    }
}

function ntlp_resources_form_alter(&$form, $form_state, $form_id) {
    switch ($form_id) {
        case 'ntlp_resources_share_stuff':
        case 'ntlp_resources_new_form':
            $form['#action'] = empty($form_state['post']) ? request_uri() : $_SERVER['HTTP_REFERER'];
            return $form;
    }
}

function ntlp_resources_all_stuff_view($file_id) {
    modalframe_child_js();
    drupal_add_js(drupal_get_path('module', 'ntlp_school') . '/modalframe_setup.js');
    drupal_add_js('
     $(function(){
        $("").attr("id" ,"image_dialog");
        });', inline);

    $resource_obj = get_attahced_file_detail($file_id);

    $stuff_image = '<img src="' . $resource_obj->filepath . '" style="max-width:680px; width:auto !important; width:680px;" />';

    return $stuff_image;
}

function ntlp_resource_copy_frm($course_nid, $resource_nid) {
    return drupal_get_form('ntlp_resource_copy_from', $course_nid, $resource_nid);
}

function ntlp_resource_copy_from($form_state = null, $course_nid, $resource_nid) {
    global $user;
    modalframe_child_js();

    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/ntlp_resources.js');
    drupal_set_title("Copy Resource");

    ahah_helper_register($form, $form_state);
    drupal_add_js(drupal_get_path('module', 'ntlp_resources') . '/resources_ahah_helper.js', 'footer');

    $resource_obj = get_resource_detail($resource_nid);

    $form['copy_resource'] = array(
        '#type' => 'fieldset',
        '#tree' => TRUE, // Don't forget to set #tree!
        '#prefix' => '<div id="dialog-show-confirmation" style="display: none;" title="Message:">
    <span class="msg">Are you sure you want to submit the form?</span>
   </div><table border="0" style="margin-bottom: 20px;"><tbody><tr><td style="color: rgb(153, 153, 153);">Choose a course, project, and project category to place this resource in. You can only select from courses in the active school year.</td> <td><div style="float: right;">
</div>
</div></td></tr></tbody></table><div style="width:280px;height:250px" >',
        '#suffix' => '</div>',
    );

    $form['copy_resource']['resource_nid'] = array(
        '#type' => 'hidden',
        '#value' => $resource_nid,
        '#id' => 'resource_nid',
    );

    if (isset($form_state['storage']['copy_resource']['selected_courses']['courses'])) {
        $selected_course = $form_state['storage']['copy_resource']['selected_courses']['courses'];
//        unset($form_state['storage']['copy_resource']['project_row']['project_div']['selected_project']);
    } else {

        $selected_course = -1;
    }

    if (isset($form_state['storage']['copy_resource']['project_row']['selected_project'])) {
        $selected_project = $form_state['storage']['copy_resource']['project_row']['selected_project'];
    } else {

        $selected_project = $project_option[0];
    }

    $form['copy_resource']['resource_name'] = array(
        '#type' => 'textfield',
        '#value' => $resource_obj->title,
        '#size' => 30,
        '#prefix' => '<div style="width:400px;height:20px;padding-bottom: 10px;"><div style="float:left;width:120px;">' . t('Resource Name') . '</div><div style="padding-left: 160px;">',
        '#suffix' => '</div></div>',
        '#id' => 'txt_resource_name'
    );

    $years_option = get_school_years_for_staff(get_this_school());
    if (empty($years_option)) {
        $years_option[0] = 'No Years Found';
    }

    if (isset($form_state['storage']['copy_resource']['school_year'])) {
        $selected_year = $form_state['storage']['copy_resource']['school_year'];
//        unset($form_state['storage']['copy_resource']['project_row']['project_div']['selected_project']);
    } else {
                        
        $selected_year = get_this_course_year($course_nid);
    }

    $form['copy_resource']['school_year'] = array(
        '#type' => 'select',
        '#options' => $years_option,
        '#default_value' => $selected_year,
        '#prefix' => '<div style="width:400px;height:20px;padding-bottom: 10px;"><div style="float:left;width:120px;">' . t('School Year') . '</div><div style="padding-left: 162px;"><span class="comboboxBgLeft" style="width:200px;">',
        '#suffix' => '</span></div></div>',
        '#attributes' => array('class' => "my-dropdown"),
        '#ahah' => array(
            'path' => ahah_helper_path(array('copy_resource', 'selected_courses')),
            'wrapper' => 'resource-courses-wrapper',
            'progress' => 'none',
        ),
    );

    if (isset($user->roles[NTLP_ROLEID_NETWORKMANAGER]) || isset($user->roles[NTLP_ROLEID_NETWORKSTAFF])
            || isset($user->roles[NTLP_ROLEID_SCHOOLLEADER]) || isset($user->roles[NTLP_ROLEID_SITEADMIN])) {
        $teacher_courses = _get_courses_for_year(get_this_school(), $selected_year);
    } else {

        $teacher_courses = _get_teacher_courses($user->uid, array(), false, $selected_year);
    }
    if (sizeof($teacher_courses) > 1) {
        foreach ($teacher_courses as $course) {
            $course_options[0] = 'Select Course';


            $course_options[$course->nid] = truncate_data($course->title, 25);
        }
    } else {
        $course_options[0] = 'No Course Available';
    }

    $form['copy_resource']['selected_courses'] = array(
        '#type' => 'item',
        '#prefix' => '<div id="resource-courses-wrapper">',
        '#suffix' => '</div>',
    );

    $form['copy_resource']['selected_courses']['courses'] = array(
        '#type' => 'select',
        '#options' => $course_options,
        '#default_value' => (($selected_course < 0) ? 0 : $selected_course),
        '#prefix' => '<div style="width:400px;height:20px;padding-bottom: 10px;"><div style="float:left;width:120px;">' . t('Courses') . '</div><div style="padding-left: 162px;"><span class="comboboxBgLeft" style="width:200px;">',
        '#suffix' => '</span></div></div>',
        '#attributes' => array('class' => "my-dropdown"),
        '#ahah' => array(
            'path' => ahah_helper_path(array('copy_resource', 'project_row')),
            'wrapper' => 'resource-copy-wrapper',
            'progress' => 'none',
        ),
        '#id' => 'selec_course_nid',
    );

    if ($selected_course >= 0) {
        $course_projects = get_course_projects($selected_course);
        $categories_options = null;
    }

    if ($course_projects) {
        foreach ($course_projects as $project) {
            $project_option[0] = 'Select Project';

            $project_option[$project->nid] = truncate_data($project->title, 25);
        }
    } else {
        $project_option[0] = 'No Project Available';
    }

    if (isset($selected_project) && $selected_project > 0) {
        if (!is_project_exist_course($selected_course, $selected_project)) {
            $selected_project = 0;
        }
    } else {
        $selected_project = 0;
    }

    $form['copy_resource']['project_row'] = array(
        '#type' => 'item',
        '#prefix' => '<div id="resource-copy-wrapper">',
        '#suffix' => '</div>',
    );

    $form['copy_resource']['project_row']['selected_project'] = array(
        '#type' => 'select',
        '#options' => $project_option,
        '#default_value' => $selected_project,
        '#ahah' => array(
            'path' => ahah_helper_path(array('copy_resource', 'project_row', 'category_row')),
            'wrapper' => 'project-category-wrapper',
            'progress' => 'none',
        ),
        '#prefix' => '<div style="width:400px;height:20px;padding-bottom: 10px;"><div style="width:120px;float:left;">' . t('Projects') . '</div><div style="padding-left: 162px;"><span class="comboboxBgLeft" style="width:200px;">',
        '#suffix' => '</span></div></div>',
        '#attributes' => array('class' => "my-dropdown"),
        '#id' => 'selec_project_nid',
    );

    watchdog('resource.', 'course nid ' . $selected_course . ' project ' . $selected_project);
    $project_categories = get_project_section($selected_project);

    if ($project_categories) {
        foreach ($project_categories as $category) {
            $categories_options[0] = 'Select Category';
            $categories_options[$category->tid] = truncate_data($category->name, 25);
        }
    } else {
        $categories_options[0] = 'No Category Available';
    }

    $form['copy_resource']['project_row']['category_row'] = array(
        '#type' => 'item',
        '#prefix' => '<div id="project-category-wrapper">',
        '#suffix' => '</div>',
    );

    $form['copy_resource']['project_row']['category_row']['selected_category'] = array(
        '#type' => 'select',
        '#options' => $categories_options,
        '#value' => $selected_category,
        '#attributes' => array('class' => "my-dropdown"),
        '#prefix' => '<div style="width:400px;height:20px;padding-bottom: 10px;"><div style="width:120px;float:left;">' . t('Project Category') . '</div><div style="padding-left: 162px;"><span class="comboboxBgLeft" style="width:200px;">',
        '#suffix' => '</span></div></div>',
        '#id' => 'selec_categoery_tid',
    );


    $option = '<div style="float:left;padding-right:2px;"><span><a class="SaveBtn" onclick="copy_resource();">Copy</a></span></div>';
    $form['copy_resource']['copy_resource_button'] = array(
        '#type' => 'item',
        '#value' => '<div style="padding-top:52px;width:400px;" class="clearfix">' . $option . '<div style="float:left;padding-left:2px;"><span><a class="CancelBtn" style="text-align:center;" onclick="copy_resource();parent.Drupal.modalFrame.close();"><span style="position:relative;top:3px;">Cancel</span></a></span></div></div>',
    );

    return $form;
}

function ntlp_resource_copy_data($course_nid, $project_nid, $section_tid, $src_resoruce_nid) {
    global $user;

    $resource_name = arg(7);
    $record = _get_resource_order($course_nid, $section_tid);

    if ($record != false) {
        $resource_order = $record->resource_order + 1;
    } else {
        $resource_order = 0;
    }

    $resource_obj = get_resource_detail($src_resoruce_nid);

    if ($resource_obj) {

        $resource_node = new stdClass();
        $resource_node->title = $resource_name;
        $resource_node->type = $resource_obj->type;   // Your specified content type
        $resource_node->created = time();
        $resource_node->body = $resource_obj->body;
        $resource_node->status = 1;
        $resource_node->sticky = 0;
        $resource_node->format = 1;       // Filtered HTML
        $resource_node->uid = $user->uid;
        $resource_node->comment = 2;

        node_save($resource_node);

        db_query("INSERT INTO {ntlp_course_resource} (nid, course_nid, fid, type, path, is_shared)
                VALUES(%d, %d, %d, '%s', '%s', %d)", $resource_node->nid, $course_nid, $resource_obj->fid, $resource_obj->resource_type, $resource_obj->path, $resource_obj->is_shared);

        db_query("INSERT INTO {ntlp_project_resource}
                ( nid, project_nid, resource_order, section_tid, availability )
                VALUES(%d, %d, %d, %d, '%s')", $resource_node->nid, $project_nid, $resource_order, $section_tid, 'H');

        $resource_attch_result = db_query("SELECT name, resource_nid , pebl_attachment_fid, type,
                        path, order_number FROM dpl_ntlp_resource_attachment
                        WHERE resource_nid = %d", $src_resoruce_nid);


        if ($resource_attch_result->num_rows > 0) {

            while ($data = db_fetch_object($resource_attch_result)) {
                db_query("INSERT INTO dpl_ntlp_resource_attachment (name, resource_nid, pebl_attachment_fid, type, path, order_number)
                                VALUES('%s', %d, %d, '%s', '%s', %d)", $data->name, $resource_node->nid, $data->pebl_attachment_fid, $data->type, $data->path, $data->order_number);
            }
        }
    }
}

function get_resource_file_icon($filename) {

    $path = 'themes/Boldr/Images/resourceStuff/';

    $file_arr = explode('.', $filename);
    $extension = $file_arr[sizeof($file_arr) - 1];

    if (empty($extension))
        return $path . 'img_document.png';

    if (strpos(" doc, docx, odt", $extension))
        return $path . 'word_document.png';

    elseif (strpos(" ppt, pptx, odp", $extension))
        return $path . 'ppt_document.png';

    elseif (strpos(" xls, xlsx, ods", $extension))
        return $path . 'xls_document.png';

    elseif (strpos(" pdf", $extension))
        return $path . 'pdf_document.png';

    else
        return $path . 'img_document.png';
}

function truncate_data($fieldname, $numChar) {
    $data = '';
    if (strlen($fieldname) > $numChar) {
        if (isAnyUppercase($fieldname)) {
            $data = substr($fieldname, 0, 20) . '...';
        } else {
            $data = substr($fieldname, 0, $numChar) . '...';
        }
    } else {
        $data = $fieldname;
    }

    return $data;
}

function isAnyUppercase($string) {
    return (bool) preg_match("/[A-Z]/", $string);
}

function _get_resource_type_icons($type, $filename=null, $doc_type=null) {
    $class = "";

    $file_arr = explode('.', $filename);
    $extension = $file_arr[sizeof($file_arr) - 1];

    if ($type == 'lo_document' || $type == 'lo_page') {

        if ($doc_type != null) {
            if ($doc_type == 'G')
                return 'icon_googledoc';
        }


        if (empty($extension)) {
            if ($type == 'lo_document') {
                return 'icon_document ' . $filename;
            } else {
                return 'icon_page ' . $filename;
            }
        }
        if (strpos(" doc, docx, odt", $extension))
            return 'icon_word';

        elseif (strpos(" ppt, pptx, odp", $extension))
            return 'icon_ppt';

        elseif (strpos(" xls, xlsx, ods", $extension))
            return 'icon_excel';

        elseif (strpos(" pdf", $extension))
            return 'icon_pdf';

        elseif (strpos(" jpg, jpeg, gif, png", $extension)) {
            return 'icon_image';
        } else {
            if ($type == 'lo_document')
                return 'icon_document';
            else if ($type == 'lo_page')
                return "icon_page";
        }
    }else if ($type == 'lo_image') {
        $class = "icon_image";
    } else if ($type == 'lo_link') {
        $class = "icon_link";
    } else if ($type == 'lo_page') {
        $class = "icon_page";
    } else if ($type == 'lo_share_idea') {
        $class = "icon_shareIdea";
    } else if ($type == 'lo_video') {
        $class = "icon_video";
    } else if ($type == 'lo_task' || $type == 'lo_journal' || $type == 'lo_workshop') {
        $class = "icon_activity";
    } else {
        $class = "";
    }

    return $class;
}
