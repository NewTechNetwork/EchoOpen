<?php
// Echo Open software Copyright Â© 2012 KnowledgeWorks Foundation
// ECHO OPEN trademark and logo are trademarks of New Technology Network LLC
// The Echo Open software is licensed under the GNU GPLv2.  For licensing information // please contact New Technology Network Licensing at: // webmaster@newtechnetwork.org or 935 Clinton Street, Napa, CA 94559.


/**
 * Implementation of hook_hook_info().
 */
function ntlp_actions_hook_info() {
  return array(
    'ntlp_actions' => array(
      'ntlp_actions' => array(
        'activity_graded' => array(
          'runs when' => t('An activity has been graded')
        ),
        'group_membership_request' => array(
          'runs when' => t('A group membership has been requested')
        ),
        'student_group_created' => array(
          'runs when' => t('A student group has been created')
        ),
        'project_awarded_exemplary' => array(
          'runs when' => t('A project has been awarded exemplary status')
        ),
        'project_archive_request' => array(
          'runs when' => t('A project archive has been requested')
        ),
        'content_posted' => array(
          'runs when' => t('A content has been posted')
        ),
      ),
    ),
  );
}

/**
 * Implementation of hook_filemaker().
 */
function ntlp_actions_ntlp_actions($op, $node) {
  $aids = _trigger_get_hook_aids('ntlp_actions', $op);
  $context = array(
    'hook' => 'ntlp_actions',
    'op' => $op,
    'node' => $node,
  );
  actions_do(array_keys($aids), $node, $context);
}

/**
 * Implementation of hook_action_info().
 */
function ntlp_actions_action_info() {
    return array(
        'ntlp_actions_announcement_mail_action' => array(
                'description' => t('Send Course Announcement Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),
        'ntlp_actions_activity_created_mail_action' => array(
                'description' => t('Send Activity Posted Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),
        'ntlp_actions_project_created_mail_action' => array(
                'description' => t('Send Project Posted Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_activity_graded_mail_action' => array(
                'description' => t('Send Activity Graded Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('update'),
                ),
        ),

        'ntlp_actions_course_resource_created_mail_action' => array(
                    'description' => t('Send Course Shared Stuff Item Posted Email'),
                    'type' => 'node',
                    'configurable' => TRUE,
                    'behavior' => array('changes_node_property'),
                    'hooks' => array(
                        'any' => TRUE,
                        'nodeapi' => array('insert'),
                    ),
            ),
        
        'ntlp_actions_group_resource_created_mail_action' => array(
                    'description' => t('Send Group Shared Stuff Item Posted Email'),
                    'type' => 'node',
                    'configurable' => TRUE,
                    'behavior' => array('changes_node_property'),
                    'hooks' => array(
                        'any' => TRUE,
                        'nodeapi' => array('insert'),
                    ),
            ),

        'ntlp_actions_comment_on_course_resource_mail_action' => array(
                'description' => t('Send Course Shared Stuff Item Commented Email'),
                'type' => 'comment',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'comment' => array('insert'),
                  )
        ),

        'ntlp_actions_comment_on_group_resource_mail_action' => array(
                'description' => t('Send Group Shared Stuff Item Commented Email'),
                'type' => 'comment',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'comment' => array('insert'),
                  )
        ),

        'ntlp_actions_comment_on_course_discussion_mail_action' => array(
                'description' => t('Send Course Discussion Topic Commented Email'),
                'type' => 'comment',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'comment' => array('insert'),
                  )
        ),

        'ntlp_actions_comment_on_group_discussion_mail_action' => array(
                'description' => t('Send Group Discussion Topic Commented Email'),
                'type' => 'comment',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'comment' => array('insert'),
                  )
        ),


        'ntlp_actions_school_event_created_mail_action' => array(
                'description' => t('Send School wide Event Posted Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_network_event_created_mail_action' => array(
                'description' => t('Send Network wide Event Posted Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_course_item_liked_mail_action' => array(
                'description' => t('Send My Course Item Liked Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_group_item_liked_mail_action' => array(
                'description' => t('Send My Group Item Liked Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_group_membership_request_mail_action' => array(
                'description' => t('Send Group Membership Request Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_student_group_created_mail_action' => array(
                'description' => t('Send Student Group Created Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_project_awarded_exemplary_mail_action' => array(
                'description' => t('Send Project Awarded Exemplary Status Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),

        'ntlp_actions_project_archive_request_mail_action' => array(
                'description' => t('Send Project Archive Request Email'),
                'type' => 'node',
                'configurable' => TRUE,
                'behavior' => array('changes_node_property'),
                'hooks' => array(
                    'any' => TRUE,
                    'nodeapi' => array('insert'),
                ),
        ),


    );
}

function ntlp_actions_get_form_email_template($context) {

  if (!isset($context['subject'])) {
    $context['subject'] = '';
  }
  if (!isset($context['message'])) {
    $context['message'] = '';
  }
  $form['subject'] = array(
    '#type' => 'textfield',
    '#title' => t('Subject'),
    '#default_value' => $context['subject'],
    '#size' => '20',
    '#maxlength' => '254',
    '#description' => t('The subject of the message.'),
  );
  $form['message'] = array(
    '#type' => 'textarea',
    '#title' => t('Message'),
    '#default_value' => $context['message'],
    '#cols' => '80',
    '#rows' => '20',
    '#description' => t('The message that should be sent.'),
  );
  $form['help'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#title' => t('Placeholder tokens'),
    '#description' => t("The following placeholder tokens can be used in to generate the URL path. Some tokens may not be available, depending on the context in which the action is triggered."),
  );

  $form['help']['tokens'] = array(
    '#value' => theme('token_help', 'all'),
  );

  return $form;
}

//Form functions for various actions

function ntlp_actions_announcement_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_activity_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_project_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_activity_graded_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_course_resource_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_group_resource_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_comment_on_course_resource_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_comment_on_group_resource_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_comment_on_course_discussion_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_comment_on_group_discussion_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_school_event_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_network_event_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_course_item_liked_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_group_item_liked_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_group_membership_request_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_student_group_created_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_project_awarded_exemplary_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}

function ntlp_actions_project_archive_request_mail_action_form($context) {
    return ntlp_actions_get_form_email_template($context);
}



//Form submit functions for actions

function ntlp_actions_announcement_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_activity_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_project_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_activity_graded_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_course_resource_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_group_resource_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_comment_on_course_resource_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_comment_on_group_resource_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_comment_on_course_discussion_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_comment_on_group_discussion_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_school_event_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_network_event_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_course_item_liked_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_group_item_liked_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_group_membership_request_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_student_group_created_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_project_awarded_exemplary_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}

function ntlp_actions_project_archive_request_mail_action_submit($form, &$form_state) {
    return ntlp_actions_submit_form_email_template($form, $form_state);
}



function ntlp_actions_submit_form_email_template($form, &$form_state) {
  // Process the HTML form to store configuration. The keyed array that
  // we return will be serialized to the database.
  $params = array(
    'subject'   => $form_state['values']['subject'],
    'message'   => $form_state['values']['message'],
  );
  return $params;
}

/**
 * Implementation of a Drupal action.
 */

function ntlp_actions_announcement_mail_action(&$node, $context = array()) {

    if ($node->type == 'ntlp_announcement') {
        if (strlen($node->body) > 0) {
            send_notification_email($node, $context, 1, 0);
        }
    }
}

function ntlp_actions_activity_created_mail_action(&$node, $context = array()) {

    switch ($node->type) {
        case 'lo_journal':
        case 'lo_task':
        case 'lo_workshop':
            break;
   }
}

function ntlp_actions_project_created_mail_action(&$node, $context = array()) {
    
    if ($node->type == 'ntlp_project')
        send_notification_email($node, $context, 3, 29);
}

function ntlp_actions_activity_graded_mail_action(&$node, $context = array()) {
    $context['graded-user']   = $node->graded_user;
    send_notification_email($node, $context, 4, 5);
}

function ntlp_actions_course_resource_created_mail_action(&$node, $context = array()) {
    
    switch ($node->type) {
        case 'lo_image':
        case 'lo_link':
        case 'lo_video':
        case 'lo_page':
        case 'lo_document':
        case 'lo_share_idea':

            if (isset($node->context)) {

                $node_context = $node->context;

                $context_node = node_load($node_context);
                if ($context_node->type == 'ntlp_course') {
                    send_notification_email($node, $context, 6);
                }
            }
            
            break;
   }
}

function ntlp_actions_group_resource_created_mail_action(&$node, $context = array()) {

    switch ($node->type) {
        case 'lo_image':
        case 'lo_link':
        case 'lo_video':
        case 'lo_page':
        case 'lo_document':
        case 'lo_share_idea':

            if (isset($node->context)) {

                $node_context = $node->context;

                $context_node = node_load($node_context);
                if ($context_node->type == 'ntlp_group') {
                    send_notification_email($node, $context, 8);
                }
            }

            break;
   }
}

function ntlp_actions_comment_on_course_resource_mail_action(&$node, $context = array()) {

    $comment_node_owner = get_resource_owner ($node->nid);
    if (isset($comment_node_owner) && $comment_node_owner) {
        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_course') {

            $node->context = $node->uid;
            send_notification_email($node, $context, 7);
        }
    }
}

function ntlp_actions_comment_on_group_resource_mail_action(&$node, $context = array()) {

    $comment_node_owner = get_resource_owner ($node->nid);

    if (isset($comment_node_owner) && $comment_node_owner) {
        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_group') {

            $node->context = $node->uid;
            send_notification_email($node, $context, 9);
        }
    }
}

function ntlp_actions_comment_on_course_discussion_mail_action(&$node, $context = array()) {

    $comment_node_owner = db_fetch_object(forum_topic_container($node->nid));

    if (isset($comment_node_owner) && $comment_node_owner) {
        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_course') {

            $node->context = $node->uid;
            send_notification_email($node, $context, 27);
        }
    }
}

function ntlp_actions_comment_on_group_discussion_mail_action(&$node, $context = array()) {

    $comment_node_owner = db_fetch_object(forum_topic_container($node->nid));

    if (isset($comment_node_owner) && $comment_node_owner) {
        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_group') {

            $node->context = $node->uid;
            send_notification_email($node, $context, 28);
        }
    }
}

function ntlp_actions_school_event_created_mail_action(&$node, $context = array()) {
    if ($node->type == 'ntlp_school_event')
        send_notification_email($node, $context, 10);
}
function ntlp_actions_network_event_created_mail_action(&$node, $context = array()) {
    if ($node->type == 'ntlp_network_event')
        send_notification_email($node, $context, 11);
}

function ntlp_actions_course_item_liked_mail_action(&$node, $context = array()) {

    if (isset($context['flag'])) {
        $comment_node_owner = get_resource_owner ($context['content_id']);

        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_course')
            send_notification_email($node, $context, 12);
    }
}

function ntlp_actions_group_item_liked_mail_action(&$node, $context = array()) {

    if (isset($context['flag'])) {
        $comment_node_owner = get_resource_owner ($context['content_id']);

        $context_node = node_load($comment_node_owner->course_nid);

        if ($context_node->type == 'ntlp_group')
            send_notification_email($node, $context, 13);
    }
}

function ntlp_actions_group_membership_request_mail_action(&$node, $context = array()) {
    send_notification_email($node, $context, 16);
}

function ntlp_actions_student_group_created_mail_action(&$node, $context = array()) {
    send_notification_email($node, $context, 17);
}

function ntlp_actions_project_awarded_exemplary_mail_action(&$node, $context = array()) {
    send_notification_email($node, $context, 18);
}

function ntlp_actions_project_archive_request_mail_action(&$node, $context = array()) {
    if ($node->type == 'ntlp_library_project')
        send_notification_email($node, $context, 25);
}


function send_notification_email(&$node, $context = array(), $notification_id = null, $parent_notif_id = null, $self_notify=false) {

    watchdog('action', 'Send Mail Node: ' . print_r($node, true) . '<br><br>' . 
                'Send Mail Context: ' . print_r($context, true) . '<br><br>');
                
    if (!isset($notification_id))
        return;

    global $user;
    
    if ($node->context == 'node_id')
        $node->context = $node->nid;
    
    $recipient_list = get_recipients($node, $context);

    watchdog('action', 'All Recipient list: ' . implode(',', $recipient_list));
    
    if (!isset($recipient_list))
        return;

    if (count($recipient_list) <= 0) 
        return;
    
    //Send notification to allowed users only.
    $recipient_list = filter_allowed_school_users_only($recipient_list);
    if (!isset($recipient_list) || count($recipient_list) <= 0)
        return;

    watchdog('action', 'Filtered Recipient list: ' . implode(',', $recipient_list));
    
    if (isset($parent_notif_id)) {
        $parents_list = get_parents_for_recipients($recipient_list);

        if (isset($parents_list) && count($parents_list) > 0) {
            $parents_ids = implode(',', $parents_list);
            $parents_list = filter_notification_users($parents_ids, $parent_notif_id);
        }
    }

    $recipient_ids = implode(',', $recipient_list);
    $recipient_list = filter_notification_users($recipient_ids, $notification_id);
    
    if (isset($parent_notif_id) && isset($parents_list)) {

        foreach($parents_list as $parent_uid => $parent_email)
            $recipient_list[$parent_uid] = $parent_email;
    }

    //again check if the list is empty or not after filtering
    if (!isset($recipient_list) || $recipient_list == null)
        return;
    
    token_normalize_context($context);
    $params['from'] = 'noreply@echo.newtechnetwork.org'; //variable_get('site_mail', ini_get('sendmail_from'));
    $recipient = "testechoemail@yahoo.com";

    $context['uid']         = $node->uid;
    $context['module']      = $context['hook'];
    $context['type']        = $node->type;
    $context['node-id']     = $node->nid;
    $context['node-title']  = $node->title;
    $context['node-type']   = $node->type;
    $context['node-context']= ($node->context == 'node_id') ? $node->nid : $node->context;

    //$params['subject'] = str_replace(array("\r", "\n"), '', token_replace($context['subject'], 'activity', $context));

    foreach ($recipient_list as $recipient_uid => $recipient_address) {

        if (!$self_notify && $user->uid == $recipient_uid)
            continue;
        
        $context['recipient_uid'] = $recipient_uid;

        $params['body'] =
            str_replace(array("\r", "\n"), '<br/>', token_replace($context['message'], 'activity',  $context));

        $params['subject'] = $recipient_address . str_replace(array("\r", "\n"), '', token_replace($context['subject'], 'activity', $context));
        drupal_mail('ntlp_actions', 'action_send_email', $recipient, language_default(), $params);
        drupal_mail('ntlp_actions', 'action_send_email', $recipient_address, language_default(), $params);
    }
}

function filter_demo_school_users_only($recipient_ids) {

    $result = db_query("select uid from dpl_ntlp_user where school_nid=50767");

    $demo_uids = array();
    while ($demo_user = db_fetch_object($result)) {
        $demo_uids[] = $demo_user->uid;
    }

    if (count($recipient_ids) > 0 && isset($demo_uids) && count($demo_uids) > 0) {
        $recipient_ids = array_intersect($recipient_ids, $demo_uids);
    }
    return $recipient_ids;
}

function filter_allowed_school_users_only($recipient_ids) {

    $perm_name = 'Receive Email Notifications';
    
    $rs = db_query("SELECT ur.uid FROM {permission} p INNER JOIN {users_roles} ur ON p.rid = ur.rid INNER JOIN {ntlp_user} u ON ur.uid = u.uid
        WHERE FIND_IN_SET(CAST(CONCAT(' ', CAST(u.school_nid AS CHAR), ' ', '%s') AS CHAR), p.perm) AND ur.uid IN (%s)", 
        $perm_name, implode(',', $recipient_ids));

    $allowed_uids = array();
    while ($allowed_user = db_fetch_object($rs)) {
        $allowed_uids[] = $allowed_user->uid;
    }

    return $allowed_uids;
}

function ntlp_actions_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
}
/**
 * Implementation of hook_action_info_alter().
 */
//function ntlp_actions_action_info_alter(&$info) {
//
//  // Loop through each action.
//  foreach ($info as $type => $data) {
//
//    // Only add our trigger to node or system actions.
////    if (stripos($type, "node_") === 0 || stripos($type, "system_") === 0) {
//
//      // Don't remove any triggers that are already added to the approved list.
//      if (isset($info[$type]['hooks']['application'])) {
//        $info[$type]['hooks']['ntlp_actions'] = array_merge($info[$type]['hooks']['ntlp_actions'], array('create', 'update'));
//      }
//
//      // Add our trigger to the approved list of hooks.
//      else {
//        $info[$type]['hooks']['ntlp_actions'] = array('create', 'update');
//      }
////    }
//  }
//}
//trigger_ntlp_actions_activity_created_assign_form

function get_recipients($node, $context) {

    global $user;

    if (isset($node->group_admins)) { //for group_membership_request and create_student_group
        for ($i=0; $i < count($node->group_admins); $i++) {
            $recipient_ids[] = $node->group_admins[$i];
        }

        return $recipient_ids;
    }

    if ($context['op'] == 'project_archive_request') { //for project_archive_request
        $recipient_rs = get_users_by_role(NTLP_ROLEID_NETWORKMANAGER);

        while (($stu_obj = db_fetch_object($recipient_rs))) {
            $recipient_ids[] = $stu_obj->uid;
        }

        return $recipient_ids;
    }

    if ($context['op'] == 'project_awarded_exemplary') { //for project_awarded_exemplary
        $project_owner = get_user_record($node->submitted_by);
        $recipient_ids[] = $project_owner->uid;

        return $recipient_ids;
    }

    if (isset($node->graded_user)) { //for activity grade
        $graded_user = get_user_record($node->graded_user);
        $recipient_ids[] = $graded_user->uid;

        return $recipient_ids;
    }

    if ($context['hook'] == "comment") {

        $recipient_ids[] = node_load($node->nid)->uid;
        return $recipient_ids;
    }

    if (isset($context['flag'])) {

        $node = node_load($context['content_id']);

        $recipient_ids[] = $node->uid;
        return $recipient_ids;
    }

    if (isset($node->context)) {

        if (isset($comment_node_owner))
            $node_context = $comment_node_owner->course_nid;
        else
            $node_context = $node->context;

        $context_node = node_load($node_context);
    }

    $node_type = $node->type;

    switch ($node_type) {

        case 'ntlp_announcement':
        case 'ntlp_project':
        case 'lo_image':
        case 'lo_link':
        case 'lo_video':
        case 'lo_page':
        case 'lo_document':
        case 'lo_share_idea':

            switch ($context_node->type) {
                case 'ntlp_course':
                    $recipient_rs = get_course_user_ids($context_node->nid);
                    break;
                case 'ntlp_group':
                    $recipient_rs = get_group_users($context_node->nid);
                    break;
                case 'ntlp_forum':
                    break;
            }

            break;

        case 'lo_journal':
        case 'lo_task':
        case 'lo_workshop':
        case 'lo_rubric':

            $recipient_rs = get_activity_users_lite($node->nid);
            break;

        case 'ntlp_school_event':

            $recipient_rs = get_school_users($context_node->nid);
            break;

        case 'ntlp_network_event':

            $recipient_rs = get_all_network_event_recipients();
            break;
    }

    while (($user_obj = db_fetch_object($recipient_rs))) {
        $recipient_ids[] = $user_obj->uid;
    }

    return $recipient_ids;
}

function get_parents_for_recipients($recipient_ids) {

    $parent_ids = array();
    if (isset($recipient_ids)) {
        foreach ($recipient_ids as $uid) {
            $parent_rs = get_student_parents($uid);

            while ($parent_obj = db_fetch_object($parent_rs)) {
                $parent_ids[] = $parent_obj->parent_uid;
            }
        }
    }
    return $parent_ids;
}

function get_all_network_event_recipients() {
    return db_query("SELECT nu.uid FROM {ntlp_user} nu
                INNER JOIN {users} u ON nu.uid = u.uid
                INNER JOIN {users_roles} ur ON ur.uid = u.uid
                INNER JOIN {permission} p ON p.rid = ur.rid
                WHERE p.perm LIKE CONCAT('%', nu.school_nid, ' view network events%');");
}

function trigger_ntlpcontent($node, $op) {
  // Keep objects for reuse so that changes actions make to objects can persist.
  static $objects;

  // Support a subset of operations.
  if (!in_array($op, array('content_posted', 'activity_graded', 'group_membership_request', 'project_awarded_exemplary', 'project_archive_request')) ) {
    return;
  }

  $aids = _trigger_get_hook_aids('ntlp_actions', $op);
  if (!$aids) {
    return;
  }
  $context = array(
    'hook' => 'nodeapi',
    'op' => $op,
  );

  // We need to get the expected object if the action's type is not 'node'.
  // We keep the object in $objects so we can reuse it if we have multiple actions
  // that make changes to an object.
  foreach ($aids as $aid => $action_info) {
    if ($action_info['type'] != 'node') {
      if (!isset($objects[$action_info['type']])) {
        $objects[$action_info['type']] = _trigger_normalize_node_context($action_info['type'], $node);
      }
      // Since we know about the node, we pass that info along to the action.
      $context['node'] = $node;
      $result = actions_do($aid, $objects[$action_info['type']], $context, $a3, $a4);
    }
    else {
      actions_do($aid, $node, $context, $a3, $a4);
    }
  }
}
